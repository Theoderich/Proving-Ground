variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--fail-at-end -B -s .m2/settings.xml"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  APP_IMAGE_ID: $DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_REPO/proving-ground-webapp:$CI_PIPELINE_ID
  SERVICE_NAME: proving-ground-webapp
  OPENSHIFT_NAMESPACE: proving-ground


stages:
  - build
  - container
  - cleanup
  - deploy

build:
  stage: build
  image: maven:3.5-jdk-8
  services:
        - postgres:10.2
  variables:
    POSTGRES_USER: pg
    POSTGRES_PASSWORD: pg
    POSTGRES_DB: proving_ground_jooq
  script:
    - 'mvn $MAVEN_CLI_OPTS deploy'
    - 'cd proving-ground-gradle-plugin'
    - './gradlew build uploadArchives '
    - 'cd ..'
    - 'rm -r .m2/repository/de/qaware/pg'
  cache:
    paths:
      - .m2/repository
      - proving-ground-gradle-plugin/.gradle
  artifacts:
     paths:
      - '*/target/*.jar'
      - '*/build/libs/*.jar'

app-container:
  stage: container
  image: docker:latest
  script:
    - 'cp proving-ground-webapp/target/proving-ground-webapp-*.jar container/proving-ground-webapp.jar'
    - 'docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_REPO'
    - 'docker build --pull -t $APP_IMAGE_ID container'
    - 'docker push $APP_IMAGE_ID'

cleanup:
  stage: cleanup
  image: $DOCKER_REGISTRY_URL/qaware-docker/oc:latest
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - oc login $OPENSHIFT_URL -u $OPENSHIFT_USER -p $OPENSHIFT_PASS
    - oc project $OPENSHIFT_NAMESPACE
    - oc delete all -l app=$SERVICE_NAME
    - while oc get pods $SERVICE_NAME 2>&1; do sleep 1; done

deploy:
  stage: deploy
  image: $DOCKER_REGISTRY_URL/qaware-docker/oc:latest
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - oc login $OPENSHIFT_URL -u $OPENSHIFT_USER -p $OPENSHIFT_PASS
    - oc project $OPENSHIFT_NAMESPACE
    - >
      oc new-app
      --docker-image=${APP_IMAGE_ID}
      --name=$SERVICE_NAME
    - until oc get pods 2>&1 | grep $SERVICE_NAME | grep -v deploy | grep 1/1 | grep Running; do sleep 1; done
    - >
          until
          oc create route edge $SERVICE_NAME
          --hostname=proving-ground.cap.qaware.de
          --service=$SERVICE_NAME
          --insecure-policy=Allow
          --port=8080
          ; do sleep 1; done
